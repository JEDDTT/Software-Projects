#CHAPTER 2
===========
PL/SQL BLOCK STRUCTURES


set serveroutput on
--the above code must be always on in every session

----------------------------------HELLO WORLD---------------------------------------------------

declare
	v_message VARCHAR2(15);
begin
	v_message := 'hello world';
	dbms_output.put_line(v_message);
end;
/

//** the purpose of the forward slash is to make the code run
   * it also dispays the last piece of code 

-CIRCLE SURFACE

declare
	v_surface NUMBER(7,2) := 0;
	v_pi CONSTANT NUMBER(3,2) := 3.14;
	v_radius NUMBER(4,2) := 0;
begin
	v_radius := &v_radius:
	v_surface := v_pi*(v_r*_r);

	dbms_output.put_line(v_surface);
end;
/
=================================================================================================

17 August 2018 Lesson2

--Chapter 2: Basic PL/SQL Blocks

------------------------------Decison structure-------------------------------------------------

1.IF
===A program that determines if a certain number is odd or even===

declare
     v_num NUMBER(3);
     v_temp NUMBER(3);

begin
     v_num := &Number;
     v_temp := MOD(v_num,2);
  IF v_temp = 0 THEN
     DBMS_OUTPUT.PUT_LINE(V_num ||'Is an Even number');
  ELSE 
     DBMS_OUTPUT.PUT_LINE(v_num ||'Is an Odd number');
  END IF;

END;
/
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

==A program that determines grade levels and displays them 


declare
     v_num NUMBER(3) := &Number;
     
begin 
  IF v_num >= 80 THEN
     DBMS_OUTPUT.PUT_LINE(V_num ||'Is a level A');
  ELSIF v_num <80 AND v_num >= 70 THEN 
     DBMS_OUTPUT.PUT_LINE(v_num ||'Is a level B');
  ELSIF v_num <70 AND v_num >= 60 THEN 
     DBMS_OUTPUT.PUT_LINE(v_num ||'Is a level C');
  ELSIF v_num <60 AND v_num >= 50 THEN 
     DBMS_OUTPUT.PUT_LINE(v_num ||'Is a level D');
  ELSIF v_num <50 AND v_num >= 40 THEN 
     DBMS_OUTPUT.PUT_LINE(v_num ||'Is a level E');
  ELSE 
     DBMS_OUTPUT.PUT_LINE(v_num ||'Is a level F');
  END IF;
 
END;
/

=====================================================================================================

2.CASE

==A program that determines grade levels and displays them 

declare
     v_num NUMBER(3) := &Number;
begin 
 CASE v_num
  WHEN >= 80 THEN
     DBMS_OUTPUT.PUT_LINE(V_num ||'Is a level A');
  WHEN v_num <80 AND v_num >= 70 THEN 
     DBMS_OUTPUT.PUT_LINE(v_num ||'Is a level B');
  WHEN v_num <70 AND v_num >= 60 THEN 
     DBMS_OUTPUT.PUT_LINE(v_num ||'Is a level C');
  WHEN v_num <60 AND v_num >= 50 THEN 
     DBMS_OUTPUT.PUT_LINE(v_num ||'Is a level D');
  WHEN v_num <50 AND v_num >= 40 THEN 
     DBMS_OUTPUT.PUT_LINE(v_num ||'Is a level E');
  ELSE
     DBMS_OUTPUT.PUT_LINE(v_num ||'Is a level F');
  END CASE;
 
END;
/

(NOT RUNNING)

======================================================================
-----------------------------Basic Case-------------------------------

declare
     v_num NUMBER(3) := &Number;
begin 
 CASE v_num
  WHEN 80 THEN
     DBMS_OUTPUT.PUT_LINE(V_num ||'Is a level A');
  WHEN  70 THEN 
     DBMS_OUTPUT.PUT_LINE(v_num ||'Is a level B');
  WHEN  60 THEN 
     DBMS_OUTPUT.PUT_LINE(v_num ||'Is a level C');
  WHEN  50 THEN 
     DBMS_OUTPUT.PUT_LINE(v_num ||'Is a level D');
  WHEN  40 THEN 
     DBMS_OUTPUT.PUT_LINE(v_num ||'Is a level E');
  ELSE 
     DBMS_OUTPUT.PUT_LINE(v_num ||'Is a level F');
  END CASE;
END;
/

====================================================================
------------------------------Search case---------------------------

declare
     v_num NUMBER(3) := &Number;
begin 
 CASE 
  WHEN v_num >= 80 THEN
     DBMS_OUTPUT.PUT_LINE(V_num ||'Is a level A');
  WHEN v_num <80 AND v_num >= 70 THEN 
     DBMS_OUTPUT.PUT_LINE(v_num ||'Is a level B');
  WHEN v_num <70 AND v_num >= 60 THEN 
     DBMS_OUTPUT.PUT_LINE(v_num ||'Is a level C');
  WHEN v_num <60 AND v_num >= 50 THEN 
     DBMS_OUTPUT.PUT_LINE(v_num ||'Is a level D');
  WHEN v_num <50 AND v_num >= 40 THEN 
     DBMS_OUTPUT.PUT_LINE(v_num ||'Is a level E');
  ELSE
     DBMS_OUTPUT.PUT_LINE(v_num ||'Is a level F');
  END CASE;
 
END;
/

====================================================================

--LOOPING STRUCTURES
1.BASIC LOOP
--counting--

DECLARE
v_num NUMBER(3) := &Number;
v_count NUMBER(3) := 0;

BEGIN
LOOP
  EXIT WHEN v_count > v_num;
    DBMS_OUTPUT.PUT_LINE(v_count);
    v_count := v_count + 1;
END LOOP;

END;
/


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2.WHILE LOOP

DECLARE
	v_num NUMBER(3) := &Number;
	v_count NUMBER(3) := 0;

BEGIN
	WHILE v_count <= v_num LOOP
	DBMS_OUTPUT.PUT_LINE(v_count);
	v_count := v_count + 1;
  END LOOP;

END;
/


-----------------------------------------------------------------------------------------------------------
----------------------------------------------Lesson 3-----------------------------------------------------

20 Agust 2018
==Chapter 3

--Handling data in a PL/SQL block

/*Display Product Name given a product ID*/

**Select productname
from bb_product
where idproduct = &product_id;


Declare
	v_idproduct NUMBER (2):=&product_id;
	v_productname VARCHAR2(25);

Begin
	SELECT productname
	into v_productname
	from bb_product
	where idproduct = v_idproduct;
	DBMS_OUTPUT.PUT_LINE(v_productname);
End;
/

--------------------------------------------------------------------------
-------------------Declaring variables using %TYPE------------------------
#No need to update the database it will always update itself#

Declare
	v_idproduct 
	bb_product.idproduct%TYPE :=&product_id;
	v_productname 
	bb_product.productname%TYPE;

Begin
	SELECT productname
	into v_productname
	from bb_product00
	where idproduct = v_idproduct;
	DBMS_OUTPUT.PUT_LINE(v_productname);
End;
/


--------------checking if a product is on promotion or not------------------

Declare
	v_idproduct 
	bb_product.idproduct%TYPE :=&product_id;
	v_productname 
	bb_product.productname%TYPE;
	v_type bb_product.type%TYPE;

Begin
	SELECT productname, TYPE
	into v_productname, v_type
	from bb_product
	where idproduct = v_idproduct;
	DBMS_OUTPUT.PUT_LINE(v_productname);
	
	CASE v_type
	WHEN 'c'THEN
	DBMS_OUTPUT.PUT_LINE('BUY 1 GET 1 FREE');
	WHEN 'E' THEN
	DBMS_OUTPUT.PUT_LINE('NO PROMOTION');
	ELSE
	DBMS_OUTPUT.PUT_LINE('UNKNOWN PRODUCT');
	END CASE;
End;
/

---------------------INCLUDING DML-------------INSERT,UPDATE,DELETE-----------


--(CAPTURE THE DATA,TEST IF IT EXISTS,IF IT DOES YOU UPDATE IF NOT THEN YOU INSERT OTHERWISE DELETE IF STATED)--
---------------------------Using DML in a PL/SQL block------------------------


Declare
	v_idproduct 
	bb_product.idproduct%TYPE :=&product_id;
	v_productname 
	bb_product.productname%TYPE :='&product_name';
	v_price 
	bb_product.price%TYPE :=&price;
	v_stock 
	bb_product.stock%TYPE :=&STOCK;
	v_iddepartment 
	bb_product.iddepartment%TYPE :=&department;
	v_count NUMBER(2);


Begin
	SELECT COUNT(*)
	INTO v_count
	FROM bb_product
	WHERE idproduct = v_idproduct;

	IF v_count = 0 THEN
	INSERT INTO bb_product
	(IDPRODUCT, PRODUCTNAME, PRICE, STOCK, IDDEPARTMENT)
	VALUES
	(v_idproduct,v_productname,v_price,v_stock,v_iddepartment);

	ELSE
	UPDATE bb_product
	SET stock = stock+v_stock;

	END IF;	
End;
/

----------------------------------------------------------------------------------------------------

--Using record variables
========================

DECLARE

TYPE type_product IS RECORD
        (Idproduct BB_PRODUCT.IDPRODUCT%TYPE,
         productname BB_PRODUCT.PRODUCTNAME%TYPE,
         price BB_PRODUCT.PRICE%TYPE,
         stock BB_PRODUCT.STOCK%TYPE,
         iddepartment BB_PRODUCT.IDDEPARTMENT%TYPE);

         rec_product type_product;

 
 v_count NUMBER(2);

Begin


     rec_product.idproduct  :=&PRODUCT_ID;
     rec_product.productname :='&PRODUCT_NAME';
     rec_product.price :=&PRICE;
     rec_product.stock :=&STOCK;
     rec_product.iddepartment :=&iddepartment;
        
         

 SELECT COUNT(*)
 INTO v_count
 FROM BB_PRODUCT
 WHERE IDPRODUCT = rec_product.idproduct;
 
 IF v_count = 0 THEN
  INSERT INTO BB_PRODUCT 
 (IDPRODUCT,PRODUCTNAME,PRICE,STOCK,IDDEPARTMENT)
  VALUES 
  (rec_product.idproduct,rec_product.productname,rec_product.price,rec_product.stock,rec_product.iddepartment);
 
 ELSE
 
  UPDATE BB_PRODUCT
  SET STOCK = STOCK+rec_product.stock;
 
 END IF;

END;
/
------------------------------------------------------------------------------------------------
--Using record variable with %ROWTYPE
=====================================

DECLARE



         rec_product BB_PRODUCT%ROWTYPE;

 
 v_count NUMBER(2);

Begin


     rec_product.idproduct  :=&PRODUCT_ID;
     rec_product.productname :='&PRODUCT_NAME';
     rec_product.price :=&PRICE;
     rec_product.stock :=&STOCK;
     rec_product.iddepartment :=&iddepartment;
        
         

 SELECT COUNT(*)
 INTO v_count
 FROM BB_PRODUCT
 WHERE IDPRODUCT = rec_product.idproduct;
 
 IF v_count = 0 THEN
  INSERT INTO BB_PRODUCT 
 (IDPRODUCT,PRODUCTNAME,PRICE,STOCK,IDDEPARTMENT)
  VALUES 
  (rec_product.idproduct,rec_product.productname,rec_product.price,rec_product.stock,rec_product.iddepartment);
 
 ELSE
 
  UPDATE BB_PRODUCT
  SET STOCK = STOCK+rec_product.stock;
 
 END IF;

END;
/
-------------------------------------------------------------


chapter 5 Procedueres
===============
-----Display a list all product
CREATE OR REPLACE PROCEDURE sp_Product
IS
CURSOR Cur_product IS
SELECT ProductName
FROM BB_PRODUCT;

BEGIN
FOR rec_product IN Cur_product LOOP
DBMS_OUTPUT.PUT_LINE(rec_product.ProductName)
END LOOP;
END;/
EXEC sp_product;

-----Display a list all product with discount
CREATE OR REPLACE PROCEDURE sp_Product(
v_deptID NUMBER,DiscountPercent NUMBER)

IS
CURSOR Cur_product IS
SELECT ProductName,IDDEPARTMENT,PRICE
FROM BB_PRODUCT;

BEGIN
FOR rec_product IN Cur_product LOOP
IF rec_product.IDDEPARTMENT = v_deptID THEN
 rec_product.PRICE:=rec_product.PRICE-rec_product.PRICE* DiscountPercent)/100;
END IF;

DBMS_OUTPUT.PUT_LINE(rec_product.ProductName, rec_product.PRICE, rec_product.IDDEPARTMENT);

END LOOP;
END;/
EXEC sp_product(&IDDEPARTMENT, &Discount);

-----------------------------------------------------------------------------------------------------------------
Chapter 6 Function
=================
-----Display the most expensive product
CREATE OR REPLACE sf_MostExpProd
Return VARCHAR2
IS 


v_productName BB_PRODUCT.PRODUCTNAME%TYPE;

BEGIN
SELECT PRODUCTNAME INTO v_product
FROM BB_PRODUCT
WHERE PRICE =(SELECT MAX(PRICE) FROM BB_PRODUCT;
RETURRN v_product;
END;
/

calling the cerated function
------------------------------
DECLARE 
v_name VARCHAR2(25);

BEGIN
v_name := sf_MostExpProd;
DBMS_OUTPUT.PUT_LINE(v_name);
END;
/

-----------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------
